TITLE:: PolarPlot
summary:: A polar plot for data of one or more channels.
categories:: GUI
related:: Classes/ValueView, Classes/Plotter

DESCRIPTION::
A radial plot view for viewing data in degrees or radians, (e.g. microphone
patterns, cylindrical/spherical harmonics, etc.).
The plot is comprised of multiple layers, each with their own settable
attributes: grid lines, data plot, title, and legend.


CLASSMETHODS::

METHOD:: new
Create a new link::Classes/PolarPlot::.

argument:: parent
An optional parent link::Classes/Window:: or link::Classes/View:: in which to
embed  the link::Classes/PolarPlot::.

If code::nil::, a new window is created for the plot and the
strong::bounds:: link::Classes/Rect:: specifies the dimensions of the newly
created link::Classes/Window:: and its location on the screen.

argument:: bounds
A link::Classes/Rect:: specifying the view's origin within the
strong::parent:: view, and its dimensions.

argument:: data
An link::Classes/Array:: of data to plot. 2D arrays are considered multichannel
data and plotted separately, each with settable attribute. See the properties
of the link::#-plots:: drawing layer.

argument:: thetaArray
An link::Classes/Array:: of values corresponding to angular positions of each
data point.

If strong::data:: is 2D (multichannel), this argument can also be a 2D
link::Classes/Array::, assigning each element to its corresponding
sub-array in strong::data::. If there are fewer elements in
strong::thetaArray:: than strong::data::, then sub-arrays
code::data[i]:: are mapped to code::thetaArray.wrapAt(i)::.

If there is not a theta position for every datapoint, the theta positions are
considered breakpoints of an link::Classes/Env::, and the data points are
mapped into that envelope. For example a 100-point strong::dataArray:: paired
with a strong::thetaArray:: of code::[0, 2pi]:: would be uniformly distributed
through the range of code::0:: to code::2pi::.

If code::nil:: (the default), strong::dataArray:: is mapped evenly into the
full sweep range of strong::thetaBounds::.

argument:: thetaBounds
An link::Classes/Array:: of two radian values: the lower and upper bound of the
theta range of the plot. The bounds are relative to the
strong::thetaZeroPosition:: and strong::thetaDirection::. For example,
strong::thetaBounds:: for a plot showing just a 90-degree spread centered on
code::0:: would be code::[-pi/4, pi/4]::.

Default is code::[0, 2pi]::, a full 360-degree plot.
note::
Values of strong::thetaArray:: outside these bounds are clipped.
::

argument:: rhoBounds
An link::Classes/Array:: of 2 elements: the lower and upper radial bounds of the
plot.

If code::nil:: (the default), the bounds will be the maximum and minumum value
of your strong::data::.
note::
If your data lies outside the range of strong::rhoBounds::,
it will be clipped on the plot. If your strong::plotUnits:: are code::\db::,
your data will be also be clipped by link::#-clipDbLow:: in the case this is
greater than your lower bound.
::

argument:: thetaDirection
The sweep direction of the plot, code::\cw:: or code::\ccw::, clockwise or
counter-clockwise, respectively.

Default is code::\ccw::.

argument:: thetaZeroPosition
A radian value or position keyword (code::\top::, code::\botom::, code::\left::,
code::\right::) specifying the anglular position of code::0::. When setting this
by a radian value, reference angle code::0:: at the top of the plot (12 o'clock),
advancing in the direction set by the strong::thetaDirection:: argument.

Default is code::\top::.

argument:: plotRadius
A value normalized to the radius of the view, where code::1.0:: would extend the
plot radius to the edge of the view. Default is code::0.9::.
note::
The text of the link::#-thetaGridLines:: values displayed in the
link::#-grid:: are drawn just outside the plot's radius, so use a value less
than code::1.0:: to allow room for these labels if you plan to include labels
for the theta grid lines.
::

argument:: dataUnits
The unit of measurement of your strong::data::: code::\db:: or code::\scalar::.
Default is code::\scalar::. This need not match the
strong::plotUnits:: argument, which determines the units the data are displayed
in.

argument:: plotUnits
The unit of measurement to emphasis::display:: in the plot: code::\db::
or code::\scalar::. The source data need not be in the same units as the plot
displayâ€”conversion to the plot's units happens internally.

Defaults to strong::dataUnits::.

argument:: bipolar
A link::Classes/Boolean:: indicating whether or not the data should be
displayed as bipolar, i.e. the data contains positive and negative values and
negative values are reflected off of code::0:: and (optionally) plotted as a
different color than positive values.

Default is code::false::. See link::#-bipolar:: for more details.


INSTANCEMETHODS::



SUBSECTION:: Plot orientation


METHOD:: thetaZeroPosition
Set the reference for the angular direction of zero. This angle will be
relative to the code::\top:: (12 o'clock) position, and
the link::#-thetaDirection:: you specify (clockwise or counterclockwise).
link::#-thetaMin:: is defined relative to this position.

argument:: radiansOrPosition
A radian angle, referencing code::0:: as up, and a positive offset
from code::0:: degrees in either a clockwise or counterclockwise direction as
specified by link::#-thetaDirection::. Also accepts
keywords: code::\top::, code::\botom::, code::\left::, code::\right::.

argument:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: thetaDirection
Get/set the positive direction of the plot: clockwise or counterclockwise. This
affects the display of the data, as well as the direction of the offset of the
link::#-thetaMin:: from the link::#-thetaZeroPosition::.

argument:: direction
A link::Classes/Symbol::, code::\cw:: or code::\ccw::.

argument:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


SUBSECTION:: Grid Lines


METHOD:: rhoGridLines
Get/set the range and interval of rho (latitude) lines on the plot. Return the
calculated rho values with the getter method of the same name.

To set specific rho values, use link::#-rhoGridLinesAt::.

argument:: spacing
The increment between rho lines, in link::#-plotUnits::.

argument:: from
The first value at which to draw a rho line, in link::#-plotUnits::. Also
accepts keywords code::\min:: and code::\max::, which correspond to the bounds
of the link::#-plotSpec::. Defaults to code::\max::, which ensures a rho line
is drawn at the outmost edge of the plot.

argument:: to
The last value to draw a level line, in link::#-plotUnits::. Also accepts
keywords code::\min:: and code::\max::, which correspond to the bounds
of the link::#-plotSpec::. Default code::\min::.

argument:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: rhoGridLinesAt
Set the rho (latitude) grid lines at specific values, as opposed to even
intervals as in link::#-rhoGridLines::.

argument:: rhoArray
An link::Classes/Array:: of values at which to draw rho (latitude) lines on the
plot. Values should be in the same units as link::#-plotUnits::. Levels that are
out of the range of the link::#-rhoSpec:: are discarded.

argument:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: thetaGridLines
Get/set the spacing between theta (longitude) grid lines, in radians. Return the
calculated theta values with the getter method of the same name.

To set specific theta values, use link::#-thetaGridLinesAt::.

argument:: spacing
The increment between theta lines, in radians.

argument:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: thetaGridLinesAt
Set the theta (longitude) grid lines at specific values, as opposed to even
intervals as in link::#-thetaGridLines::.

argument:: thetaArray
An link::Classes/Array:: of values at which to draw longitude lines on the plot,
in radians. Values that are out of the range of code::thetaMin:: and
code::thetaMin + thetaRange:: are discarded.

argument:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: rhoGridLinesNorm
Get an link::Classes/Array:: of values at which are the
link::#-rhoGridLines::. normalized to code::[this.rhoMin .. this.rhoMax]::.


SUBSECTION:: Bounds of data display


METHOD:: thetaMin
Set the angular position of the plot's minimum bound.

argument:: radians
A radian angle, relative to link::#-thetaZeroPosition:: and link::#-thetaDirection::.

argument:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: thetaRange
Set the sweep length of the plot, starting from link::#-thetaMin::.

argument:: radians
Sweep length of the plot, in radians.

argument:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: rhoMinMax
Set the min and max rho values displayed on the plot, in link::#-plotUnits::.
Data outside this range is clipped. This is the preferred way to set the min and
max at the same time.

argument:: min
Minimum value to display, in link::#-plotUnits::. If code::nil::, the minimum
will be inferred from the data.

argument:: max
Maximum value to display, in link::#-plotUnits::. If code::nil::, the maximum
will be inferred from the data.

argument:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: rhoMin
Get/set the minimum rho values displayed on the plot.
Data outside this range is clipped. To set both the min and max at the same time,
it's more efficient to use link::#-rhoMinMax::.

argument:: min
Minimum value to display, in link::#-plotUnits::.  If code::nil::, the minimum
will be inferred from the data.

argument:: recalcNow
A link::Classes/Boolean::, specifying whether to recalculate internal data
immediately. Many of these calculations would be redundant of followed by
setting link::#-rhoMax:: (hence the link::#-rhoMinMax:: method), which is
noticeable with large data sets. Default is code::true::.

argument:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: rhoMax
Get/set the maximum rho values displayed on the plot.
Data outside this range is clipped. To set both the min and max at the same time,
it's more efficient to use link::#-rhoMinMax::.

argument:: max
Maximum value to display, in link::#-plotUnits::. If code::nil::, the maximum
will be inferred from the data.

argument:: recalcNow
A link::Classes/Boolean::, specifying whether to recalculate internal data
immediately. Many of these calculations would be redundant of followed by
setting link::#-rhoMin:: (hence the link::#-rhoMinMax:: method), which is
noticeable with large data sets. Default is code::true::.

argument:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: rhoSpec
Get/set the link::Classes/ControlSpec:: used to map the (rho) data to the plot.
This is similar to setting link::#-rhoMin:: and link::#-rhoMax::, but as the
the min and max values in those setters can be code::nil::, inferring the values
from the data and also returning code::nil:: when getting the value, the min
and max values of strong::rhoSpec:: reflect the emphasis::actual:: bounds into
which the data is mapped.  These are the values returned from
link::#-plotMin:: and link::#-plotMax::.

argument:: spec
A link::Classes/ControlSpec:: with minval and maxval in link::#-plotUnits::.
Specifying a non-linear strong::warp:: in this link::Classes/ControlSpec::
allow you to display your data (and grid lines) on a warped scaling
(see also link::#-rhoWarp::).

argument:: recalcNow
A link::Classes/Boolean::, specifying whether to recalculate the internal data
immediately (recommended). In some special cases, e.g. large datasets and
multiple parameter-setting operations, you may want to only rescale the data at
the end of all of the operations. Default is code::true::.

argument:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.


METHOD:: rhoWarp
Set the warp of the rho (radius) domain.
note:: Warping your radius domain will also affect your grid lines, so you may
need to follow this setter with link::#-rhoGridLines:: or
link::#-rhoGridLinesAt:: depending if you prefer specific rho spacing or pixel
spacing.
::

argument:: warpOrNum
A link::Classes/Warp::, or one of it's subclasses, or a
link::Classes/Number::, which will be interpreted as a
link::Classes/CurveWarp::, as with link::Classes/Env::.


METHOD:: plotMin
Get the minimum rho bound of the plot. This is equivalent to
code::rhoSpec.minval::, but not the same as link::#-rhoMin::, which can
return code::nil:: (minimum value is auto-detected). So this method will give
you the actual minimum value of the plot.


METHOD:: plotMax
Get the maximum rho bound of the plot. This is equivalent to
code::rhoSpec.maxval::, but not the same as link::#-rhoMax::, which can
return code::nil:: (maximum value is auto-detected). So this method will give
you the actual maximum value of the plot.


METHOD:: plotUnits
Get/set the units used to display the data: code::\db:: or code::\scalar::.

The data you set need not match the plot's units, your data
units are set through the link::#-data:: method, and is converted to the plot's
units for display.

argument:: dbOrScalar
A link::Classes/Symbol::: code::\db:: or code::\scalar::.

argument:: min
The minimum value at which to clip the plot levels, in link::#-plotUnits::.

argument:: max
The maximum value at which to clip the plot levels, in link::#-plotUnits::.


METHOD:: bipolar
Get/set the plot to display negative values as reflected off of
code::0:: (as the absolute value) and, optionally, drawn in a different color.
E.g. the plot of a figure-of-eight microphone pattern, where positive and
negative lobes are different colors.

Colors of negative values are set by the
link::#-plots#negativeColors:: attribute of the link::#-plots:: layer.
note::
Decibel values work as well; internally values will be converted to scalar,
the absolute value taken, then converted back to dB.
::
note:: If you have specified your dataset to have individual colors for each
datapoint, this will be ingnored in bipolar mode, and the first color from the
color array for that dataset is used.::

argument:: bool
A link::Classes/Boolean:: indicating whether the data should be displayed as
bipolar or not.

argument:: refresh
A link::Classes/Boolean:: indicating whether to refresh the view immediately.
Default is code::true::.


METHOD:: clipDbLow
Set/get the minimum dB level to clip link::#-rhoMin:: when using code::\db:: as
your link::#-plotUnits::. The reason for clipping this value is
code::0.ampdb = -inf::, which breaks link::Classes/ControlSpec::, so this will
catch and clip code::-inf::.  Default code::-90::.



SUBSECTION:: Setting Plot Data

METHOD:: data
Set the plot data.

argument:: dataArray
An link::Classes/Array:: of values to plot. If the array is 2D, the data is
considered to be multichannel and will plot the values of each sub-array.

argument:: thetaArray
An link::Classes/Array:: of values corresponding to angular positions of each
data point.

If strong::dataArray:: is 2D (multichannel), this argument can also be a 2D
link::Classes/Array::, assigning each element to its corresponding
sub-array in strong::dataArray::. If there are fewer elements in
strong::thetaArray:: than strong::dataArray::, then sub-arrays
code::dataArray[i]:: are mapped to
code::thetaArray.wrapAt(i)::.

If there is not a theta position for every datapoint, the theta positions are
considered breakpoints of an link::Classes/Env::, and the data points are
mapped into that envelope. For example a 100-point strong::dataArray:: paired
with a strong::thetaArray:: of code::[0, 2pi]:: would be uniformly distributed
through the range of code::0:: to code::2pi::.

If code::nil:: (the default), strong::dataArray:: is mapped evenly into the
full sweep range code::(thetaMin .. thetaMax)::.

argument:: units
A link::Classes/Symbol:: indicating the units of the data in
strong::dataArray::: code::\db:: or code::\scalar::. This is independent of
link::#-plotUnits::. Default is code::\scalar::.

argument:: bipolar
A link::Classes/Boolean::, specifying whether the data should be considered
bipolar, where data is reflected off code::0::, i.e. plotted as absolute
values, and color indicates polarity/phase. Default is code::false::.
See link::#-bipolar::.

argument:: refresh
A link::Classes/Boolean::, specifying whether to refresh the view immediately.
Default is code::true::.



SUBSECTION:: Appearance


METHOD:: plotRadius
Get/set the normalized value of the plot radius.

argument:: normRadius
A value in the range code::(0..1)::, which is normalized to the radius of the
view (the half-length of its smallest side). I.e. code::1.0:: would extend the
plot radius to the edge of the view. Default code::0.9::.
note:: The labels of the link::#-thetaGridLines:: displayed on the edge of the
link::#-grid:: are drawn just outside the plot's radius, so use a value less
than code::1.0:: to allow room for these labels if you want to include labels
for the theta grid lines.::


METHOD:: background
Get/set the background color of the view.

argument:: color
A link::Classes/Color::.



SUBSECTION:: Fine Tuning Appearance

The plot is comprised of multiple layers, each with their own settable
attributes: background, scale grid, data plots, title, and legend. Each drawing
layer has a code::*properties:: list (an link::Classes/Event::), the keys of
which can be accessed as pseudo-methods for getting and setting their values.
Setting an attribute automatically refreshes the view. For example:
code::
// assuming you've created a PolarPlot 'myPolarPlot'
myPolarPlot.title.show = false;    // hide the title box layer
myPolarPlot.grid.strokeWidth = 2;  // set the stroke width of the grid layer to 2 pixels
::


METHOD:: grid
Return the grid line drawing layer (a link::Classes/PolarGridLayer::).
The grid layer is drawn first (bottommost layer) and has the following
attributes:

table::
## strong::attribute:: || strong::default:: || strong::description::
## show           || code::true:: || show the grid layer or not
## fill           || code::true:: || fill the grid or not
## fillColor      || code::Color.white:: || link::Classes/Color:: to fill the grid
## showRhoLines   || code::true:: || show the rho (latitude) grid lines or not
## showThetaLines || code::true:: || show the theta (longitude) grid lines or not
## strokeWidth    || code::1:: || stroke width of grid lines
## strokeColor    || code::Color.gray.alpha_(0.4):: || stroke link::Classes/Color:: of grid lines
## showRhoVals    || code::true:: || show the value of the rho grid lines
## showThetaVals  || code::true:: || show the value of the theta grid lines
## rhoTxtOrientation || code::\horizontal:: || code::\horizontal:: for horizontal labels regardless of code::rhoTxtAng::,

code::\radial:: to be tangent to the rho line
## rhoTxtAlign    || code::\inside:: || text placement relative to rho grid lines: code::\inside::, code::\outside::, code::\on::
## rhoTxtAng      || code::0:: || the angle to align the text of the rho grid line values
## rhoTxtRound    || code::0.01:: || the resolution of the rho grid line values to display
## rhoTxtColor    || code::Color.gray.alpha_(0.4):: || the link::Classes/Color:: of the rho grid line values text
## thetaTxtRound  || code::1:: || the resolution of the theta grid line values to display
## thetaTxtWrap   || code::[ 0, 2pi ]:: || the values around which to wrap the text of

the theta grid lines
## thetaTxtOffset || code::0.065:: || the offset of the theta grid lines text from the edge

of the plot, normalized to the radius length
## thetaTxtUnits  || code::'degrees':: || units to display for theta lines values:

code::\degrees::, code::\radians::, or code::\pi::
## thetaTxtColor  || code::Color.gray.alpha_(0.4):: || the link::Classes/Color:: of the theta grid line values text
::


METHOD:: plots
Return the drawing layer responsible for drawing the data plots
(a link::Classes/PolarPlotLayer::). The plot layer is drawn drawn over the
grid layer and has the following attributes:

table::
## strong::attribute:: || strong::default:: || strong::description::
## show           || code::true:: || show the plots or not
## strokeTypes    || code::[ \line ]:: || an link::Classes/Array:: of code::\line::, code::\points::, or a code::FloatArray:: specifying a

dashed line, e.g. code::FloatArray.with(5, 2, 3, 2):: creates a

dashed line alternating 5px, 3px lines separated by 2px
## plotColors     || code::[ Color.blue ]:: || an link::Classes/Array:: of link::Classes/Color::s, one for each plot,

or an link::Classes/Array:: of link::Classes/Array::s containing link::Classes/Color::s, one for

each data point in a plot (not available when link::#-bipolar:: is code::true::)
## negativeColors || code::[ 0.09 ]:: || an link::Classes/Array:: of link::Classes/Color::s, for the negative-valued portion

of each plot, if code::bipolar == true::. You can also specify a

link::Classes/Number:: which will act as a hue shift by that amount (0..0.999).
## strokeWidth    || code::2:: || stroke width of the lines or points of the plots
## pointRad       || code::2:: || if stroke type is code::\points::, circles have strong::pointRad:: radius, in pixels,

if code::nil::, strong::pointRad:: is strong::strokeWidth::
## fillPoints     || code::false:: || if stroke type is code::\points::, fill them or not
## fill           || code::false:: || fill the area under the plots or not
## fillAlpha      || code::0.3:: || an alpha value to apply to the strong::plotColors:: used

to fill the area under each plot
::

METHOD:: title
Return the drawing layer responsible for drawing the title bar (a
link::Classes/PolarTitleLayer::), which has
the following attributes:

table::
## strong::attribute:: || strong::default:: || strong::description::
## show        || code::true:: || show the title bar or not
## fill        || code::true:: || fill the bakcground of the title bar or not
## inset       || code::10:: || space between the title box and the edge of the view, in pixels
## txt         || code::plot:: || the link::Classes/String:: to display, newline characters, code::"\n"::, are valid

for creating multiple lines
## font        || code::Font("Helvetica"):: || title's link::Classes/Font::
## fontSize    || code::18:: || title's font size
## txtColor    || code::Color.gray:: || link::Classes/Color:: of the title text
## margin      || code::15:: || space between the border of the title box and the text, in pixels
## fillColor   || code::Color.white:: || background fill link::Classes/Color:: of the title box
## showBorder  || code::true:: || show the title box's border or not
## borderWidth || code::1:: || pixel width of the title border
## borderColor || code::Color.gray:: || link::Classes/Color:: of the title border
::

METHOD:: legend
Return the drawing layer (a link::Classes/PolarLegendLayer::), which has
the following attributes:

table::
## strong::attribute:: || strong::default:: || strong::description::
## show        || code::true:: || show the legend or not
## labels      || code::[  ]:: || an link::Classes/Array:: of link::Classes/String::s, one for each data plot, in the order

defined in link::#-data::.
## align       || code::\bottomRight:: || where to align the legend in the view: code::\right::, code::\left::, code::\top::,

code::\bottom::, code::\topRight::, code::\topLeft::, code::\bottomRight::, code::\bottomLeft::
## layout      || code::\vertical:: || layout of the lines/labels: code::\vertical:: or code::\horizontal::
## inset       || code::10:: || space between the legend and the edge of the view, in pixels
## margin      || code::10:: || space between the border of the legend and the lines/text, in pixels
## spacing     || code::8:: || spacing between labels, in pixels
## lineLength  || code::15:: || length of the sample lines, in pixels
## lineSpacing || code::6:: || spacing between sample line its corresponding label text, in pixels
## font        || code::Font("Helvetica"):: || link::Classes/Font:: of the labels
## fontSize    || code::14:: || font size of the labels
## txtColor    || code::Color.gray:: || link::Classes/Color:: of the text labels
## fillColor   || code::Color.white:: || link::Classes/Color:: to fill the background of the legend
## showBorder  || code::true:: || show a border around the legend or not
## borderWidth || code::1:: || stroke width of the border around the legend
## borderColor || code::Color.gray:: || link::Classes/Color:: of the border around the legend
::



SUBSECTION:: Internal: data


METHOD:: scalarData
Get the plot data in scalar values. I.e. if link::#-data:: was set with
code::\db:: values, link::#-scalarData:: returns code::data.dbamp::.


METHOD:: dataScalarMin
Get the minimum value of the emphasis::data:: (which is not necessarily the
minimum of the plot range), as a scalar value.


METHOD:: dataScalarMax
Get the maximum value of the emphasis::data:: (which is not necessarily the
maximum of the plot range), as a scalar value.


METHOD:: plotData
Get the data stored internally for plotting, unmapped (normalized 0 .. 1) from
link::#-plotSpec::.


METHOD:: thetas
Get an link::Classes/Array:: of the theta positions of the data points. Used
internally and by the drawing layer classes.



SUBSECTION:: Internal: layout


METHOD:: cen
Get the link::Classes/Point:: centered in the area of the view in which the
plot is drawn.


METHOD:: bnds
Get the link::Classes/Rect:: describing the area of the view in which the
plot is drawn.


METHOD:: minDim
Get the minimum pixel dimension of the area of the view in which the plot is
drawn. (If the view is rectangular, link::#-minDim:: is the shortest side.)


SUBSECTION:: Other

METHOD:: export
Export the plot to an image file.

argument:: fileName
A link::Classes/String:: that is the name of the file.
If you don't provide a file extension, you'll then need to specify the
strong::format::.

argument:: directory
A link::Classes/String:: of the directory to which the file will be
written. Default is the user home directory, code::Platform.userHomeDir::.

argument:: format
An optional link::Classes/String:: of the image format to write.

code::Image.formats:: lists supported formats. If code::nil:: (the default),
the format will be inferred from the path extension.

argument:: quality
The quality factor in the range code::0:: (small compressed files) to
code::100:: (large uncompressed files) or code::-1::, the default image setting.

Default is code::-1::.

argument:: finishCond
An optional link::Classes/Condition:: which will be set code::true:: and
link::Classes/Condition#-signal#-signal:: when the image has been written.


PRIVATE:: prStartAngle, prZeroPos, prRescalePlotData, prPlotRad, prThetaLines, prPlotCen, prSweepLength, drawInThisOrder, defineMouseActions, init, drawFunc, dirFlag, prThetaGridLinesAt, prRhoGridLinesAt, prThetaGridLines, prThetaRange, prPlotBounds, prGetRhoGridLinesFromSpacing, pr ClacDataBounds, prAngInRange, prCalcDataBounds

EXAMPLES::

code::
(some example code)
::
